
# For a full list of active aliases, run `alias`.
#
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'
alias bathe='sudo apt-get clean && sudo apt-get autoremove' 
alias c='clear' 
alias dmesg='\dmesg --color=auto --reltime --human --nopager --decode' 
alias free='\free -mht' 
alias gib='sudo apt install' 
alias grep='\grep --color=auto' 
#alias jupy='cd /home/num/Numan/Softwares/Jupyter/Jupy/bin && source activate && cd && jupyter notebook' 
alias lsl='ls -l' 
alias mia='adb connect 192.168.0.100:5555 && scrcpy' 
alias py='python3'
alias re='source ~/.zshrc' 
alias relax='sudo apt update && sudo apt upgrade' 
alias sudo='\sudo ' 
alias svim='sudo vim' 
alias tree='\tree --dirsfirst -C' 
alias untar='tar -xvf' 
alias yeet='sudo apt-get --purge autoremove'
alias pipes='cd /usr/local/bin && pipes.sh'
alias discord='cd /home/num/Apps && ./Discord*'
alias search='apt-cache search'
alias jupy='cd /home/num/Numan/Softwares/Jupyter/Jupy/ && pipenv shell' 
alias mysql='mysql -u root -p'

#-- Global --#
alias -g L="| less"
alias -g H="| head"
alias -g T="| tail"
alias -g G="| grep --color=auto"
alias -g N=">/dev/null"


################################
####    Simple functions    ####
################################

# Use curl and jq to search for packages in the Arch Linux AUR
aursearch () {
    curl -sSL "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$@" | jq -r '.results[]'
}

# Convert to and from binary
binary-convert () {
    case $1 in
        -b|b)
            echo "$2" | perl -lpe '$_=join " ", unpack"(B8)*"'
            ;;
        -a|a)
            echo "$2" | perl -lape '$_=pack"(B8)*",@F'
            ;;
        0*|1*)
            echo "$@" | perl -lape '$_=pack"(B8)*",@F'
            ;;
        *)
            echo "$@" | perl -lpe '$_=join " ", unpack"(B8)*"'
            ;;
    esac
}

# Use awk as a calculator
calc () {
    awk "BEGIN {print $@}"
}

# Use owlbot.info to get definitions; requires jq
define () {
    query="$(echo "$@" | jq -Rr '@uri')"
    curl -sSL "https://api.datamuse.com/words?sp=$query&max=1&md=d" | jq '.'
}

# check Discord client versions
discord-versions () {
    echo "Canary: $(curl -sSL -I -X GET "https://discord.com/api/download/canary?platform=linux&format=tar.gz" | grep -im1 '^location:' | rev | cut -f1 -d'/' | rev)"
    echo "PTB: $(curl -sSL -I -X GET "https://discord.com/api/download/ptb?platform=linux&format=tar.gz" | grep -im1 '^location:' | rev | cut -f1 -d'/' | rev)"
    echo "Stable: $(curl -sSL -I -X GET "https://discord.com/api/download?platform=linux&format=tar.gz" | grep -im1 '^location:' | rev | cut -f1 -d'/' | rev)"    
}

# List size of directories
dirsize () { du -h --max-depth=0 "$@" | sort -h -r }
dirsize-a () { du -h "$@" | sort -h -r }

#Check to see if site is down for you or everyone
downforme () {
    curl -sSLA "$RANDOM$RANDOM" "https://api-prod.downfor.cloud/httpcheck/$@" | jq '.'
}

# List size of file
filesize () { du -h -a --max-depth=1 "$@" | sort -h -r }
filesize-a () { du -h -a "$@" | sort -h -r }

# Output Github commits and messages for chosen repo; requires jq
gitcommits () {
    curl -sSL "https://api.github.com/repos/$1/$2/commits" | jq -r '.[] | .sha, .commit.message' | paste -sd ' \n' | tail -n +2
}

# View info about a github repo; requires jq
gitinfo () {
    curl -sSL "https://api.github.com/repos/$1" | jq -r ".$2"
}

# View latest github release; requires jq
gitrelease () {
    curl -sSL "https://api.github.com/repos/$1/$2/releases" | jq -r ".[$3].assets[]"
}

# get google results
google () {
    query="$(echo "$@" | jq -Rr '@uri')"
    curl -sLA "$RANDOM" "https://www.w3.org/services/html2txt?url=https%3A%2F%2Fgoogle.com%2Fsearch%3Fq%3D$query&noinlinerefs=on&nonums=on&endrefs=on" | \
    grep -Po 'https:\/\/www\.google\.com\/url\?q=\K.*' | \
    perl -pe 's%&sa=.&ved=.*%%g' | \
    head -n -2
}

# Use cht.sh to get simple help outputs for all sorts of Linux things
help () {
    curl -sSL "https://cht.sh/$@"
}

# Output currently playing mpc song
mpc-current () {
    printf '\e[?25l'
    while true; do
        echo
        echo
        echo "$(tput setaf 4)$(mpc current --wait -f "\n\nArtist: %artist%\nSong: %title%")"
    done
}

# Show resource use for specific process
sps () {
    ps -eLo pid,rss,%cpu,comm --sort -rss | grep -i "%CPU\|$@" | grep -v 'grep'
}

# Search for and play a youtube video
mpvyt () { mpv ytdl://ytsearch10:"$*" }

# decode url encoded strings using perl
urldecode () {
    echo "$@" | perl -pe 's/\%([[:xdigit:]]{2})/chr hex $1/ge'
}

# url encode strings using jq
urlencode () {
    echo "$@" | jq -Rr '@uri'
}

# get weather using openweathermap
weather () {
    ipinfo="$(curl -sL "http://ipinfo.io/json" | jq -r '.loc | split(",")')"
    lat="$(echo "$ipinfo" | jq -r '.[0]')"
    lon="$(echo "$ipinfo" | jq -r '.[1]')"
    units="${1:-imperial}"
    curl -sSL "http://api.openweathermap.org/data/2.5/weather?lat=$lat&lon=$lon&APPID=0b86d85ffa87580e45aeded67fc9cc4b&units=$units" | jq '.'
}

# Use wttr.in to output weather
wttr (){
    LOCATION="$1"
    FLOCATION="$2"
    case "$1" in
        0*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl -sSL "wttr.in/$FLOCATION?0"
            LOCATION=""
            FLOCATION=""
            ;;
        1*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl -sSL "wttr.in/$FLOCATION?1"
            LOCATION=""
            FLOCATION=""
            ;;
        2*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl -sSL "wttr.in/$FLOCATION?2"
            LOCATION=""
            FLOCATION=""
            ;;
        *)
            if [ -z "$LOCATION" ]; then
                LOCATION="$location"
            fi
            tput reset
            curl -sSL "wttr.in/$LOCATION"
            LOCATION=""
    esac
}

# Decompress any archive type
x () {
    if [ -f "$1" ] ; then
        case "$1" in
            *.tar.*|*.tar)
                tar -xf "$1"
                ;;
            *.bz2)
                bunzip2 "$1"
                ;;
            *.rar)
                unrar x "$1"
                ;;
            *.gz)
                gunzip "$1"
                ;;
            *.jar|*.zip)
                unzip "$1"
                ;;
            *.Z)
                uncompress "$1"
                ;;
            *.deb)
                ar x "$1"
                ;;
            *)
                echo "'$1' cannot be extracted"
                ;;
        esac
    else
        echo "'$1' is not a file"
    fi
}

# Search for youtube videos
yt () {
    curl -sL "https://vid.puffyan.us/api/v1/search?q=$(echo "$@" | jq -Rr '@uri')" | jq -r '"https://youtu.be/" + .[].videoId?'
}
